// =============================================================================
// Component Styles
//
// Element mixins
// Description goes here!
// =============================================================================

element($element-names...) {
  if !called-from {
    error('Must use `element` inside of another mixin.')
  }

  $selector = ''

  for $element-name, $index in $element-names {
    if called-from[0] is 'modifier' or called-from[0] is 'pseudo' {
      $selector += '& ^[0..-2]' + $element-symbol + $element-name
    } else {
      $selector += '&' + $element-symbol + $element-name
    }

    $selector += ',' unless ($index + 1) == length($element-names)
  }

  {$selector} {
    {block}
  }
}

sibling-element($element-names...) {
  if called-from[0] == 'component' {
    error('Cannot use `sibling-element` as a direct decendant of `component`. Try `sibling-component` instead.')
  }

  $selector = ''

  for $element-name, $index in $element-names {
    if called-from[0] is 'modifier' or called-from[0] is 'pseudo' {
      $selector += '& + ^[0..-3]' + $element-symbol + $element-name
    } else {
      $selector += '& + ^[-1]' + $element-symbol + $element-name
    }

    $selector += ',' unless ($index + 1) == length($element-names)
  }

  {$selector} {
    {block}
  }
}

general-sibling-element($element-names...) {
  if called-from[0] == 'component' {
    error('Cannot use `general-sibling-element` as a direct decendant of `component`. Try `general-sibling-component` instead.')
  }

  $selector = ''

  for $element-name, $index in $element-names {
    if called-from[0] is 'modifier' or called-from[0] is 'pseudo' {
      $selector += '& ~ ^[0..-3]' + $element-symbol + $element-name
    } else {
      $selector += '& ~ ^[-1]' + $element-symbol + $element-name
    }

    $selector += ',' unless ($index + 1) == length($element-names)
  }

  {$selector} {
    {block}
  }
}

child-element($element-names...) {
  if !called-from {
    error('Must use `child-element` inside of another mixin.')
  }

  $selector = ''

  for $element-name, $index in $element-names {
    if called-from[0] is 'modifier' or called-from[0] is 'pseudo' {
      $selector += '& > ^[0..-2]' + $element-symbol + $element-name
    } else {
      $selector += '& > &' + $element-symbol + $element-name
    }

    $selector += ',' unless ($index + 1) == length($element-names)
  }

  {$selector} {
    {block}
  }
}
